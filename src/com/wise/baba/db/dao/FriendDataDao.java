package com.wise.baba.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wise.baba.db.dao.FriendData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FRIEND_DATA.
*/
public class FriendDataDao extends AbstractDao<FriendData, Void> {

    public static final String TABLENAME = "FRIEND_DATA";

    /**
     * Properties of entity FriendData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Create_time = new Property(0, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Sex = new Property(1, Integer.class, "sex", false, "SEX");
        public final static Property Logo = new Property(2, String.class, "logo", false, "LOGO");
        public final static Property Friend_name = new Property(3, String.class, "friend_name", false, "FRIEND_NAME");
        public final static Property Friend_type = new Property(4, Integer.class, "friend_type", false, "FRIEND_TYPE");
        public final static Property Friend_id = new Property(5, Integer.class, "friend_id", false, "FRIEND_ID");
        public final static Property User_id = new Property(6, Integer.class, "user_id", false, "USER_ID");
        public final static Property Friend_relat_id = new Property(7, Integer.class, "friend_relat_id", false, "FRIEND_RELAT_ID");
        public final static Property Group_letter = new Property(8, String.class, "Group_letter", false, "GROUP_LETTER");
    };


    public FriendDataDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FRIEND_DATA' (" + //
                "'CREATE_TIME' TEXT," + // 0: create_time
                "'SEX' INTEGER," + // 1: sex
                "'LOGO' TEXT," + // 2: logo
                "'FRIEND_NAME' TEXT," + // 3: friend_name
                "'FRIEND_TYPE' INTEGER," + // 4: friend_type
                "'FRIEND_ID' INTEGER," + // 5: friend_id
                "'USER_ID' INTEGER," + // 6: user_id
                "'FRIEND_RELAT_ID' INTEGER," + // 7: friend_relat_id
                "'GROUP_LETTER' TEXT);"); // 8: Group_letter
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIEND_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FriendData entity) {
        stmt.clearBindings();
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(1, create_time);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(2, sex);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(3, logo);
        }
 
        String friend_name = entity.getFriend_name();
        if (friend_name != null) {
            stmt.bindString(4, friend_name);
        }
 
        Integer friend_type = entity.getFriend_type();
        if (friend_type != null) {
            stmt.bindLong(5, friend_type);
        }
 
        Integer friend_id = entity.getFriend_id();
        if (friend_id != null) {
            stmt.bindLong(6, friend_id);
        }
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(7, user_id);
        }
 
        Integer friend_relat_id = entity.getFriend_relat_id();
        if (friend_relat_id != null) {
            stmt.bindLong(8, friend_relat_id);
        }
 
        String Group_letter = entity.getGroup_letter();
        if (Group_letter != null) {
            stmt.bindString(9, Group_letter);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FriendData readEntity(Cursor cursor, int offset) {
        FriendData entity = new FriendData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // create_time
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // logo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // friend_name
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // friend_type
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // friend_id
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // user_id
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // friend_relat_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // Group_letter
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FriendData entity, int offset) {
        entity.setCreate_time(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSex(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLogo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFriend_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFriend_type(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFriend_id(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUser_id(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setFriend_relat_id(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setGroup_letter(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FriendData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FriendData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
