package com.wise.baba.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wise.baba.db.dao.FriendAuth;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FRIEND_AUTH.
*/
public class FriendAuthDao extends AbstractDao<FriendAuth, Void> {

    public static final String TABLENAME = "FRIEND_AUTH";

    /**
     * Properties of entity FriendAuth.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property FriendId = new Property(1, String.class, "friendId", false, "FRIEND_ID");
        public final static Property AuthCode = new Property(2, Integer.class, "authCode", false, "AUTH_CODE");
    };


    public FriendAuthDao(DaoConfig config) {
        super(config);
    }
    
    public FriendAuthDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FRIEND_AUTH' (" + //
                "'ID' TEXT," + // 0: id
                "'FRIEND_ID' TEXT," + // 1: friendId
                "'AUTH_CODE' INTEGER);"); // 2: authCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIEND_AUTH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FriendAuth entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(2, friendId);
        }
 
        Integer authCode = entity.getAuthCode();
        if (authCode != null) {
            stmt.bindLong(3, authCode);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FriendAuth readEntity(Cursor cursor, int offset) {
        FriendAuth entity = new FriendAuth( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // friendId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // authCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FriendAuth entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFriendId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthCode(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FriendAuth entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FriendAuth entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
