package com.wise.baba.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wise.baba.db.dao.Suggestion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SUGGESTION.
*/
public class SuggestionDao extends AbstractDao<Suggestion, Void> {

    public static final String TABLENAME = "SUGGESTION";

    /**
     * Properties of entity Suggestion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Type = new Property(0, Integer.class, "type", false, "TYPE");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property City = new Property(2, String.class, "city", false, "CITY");
        public final static Property District = new Property(3, String.class, "district", false, "DISTRICT");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
    };


    public SuggestionDao(DaoConfig config) {
        super(config);
    }
    
    public SuggestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SUGGESTION' (" + //
                "'TYPE' INTEGER," + // 0: type
                "'KEY' TEXT," + // 1: key
                "'CITY' TEXT," + // 2: city
                "'DISTRICT' TEXT," + // 3: district
                "'DATE' INTEGER);"); // 4: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SUGGESTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Suggestion entity) {
        stmt.clearBindings();
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(1, type);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(4, district);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Suggestion readEntity(Cursor cursor, int offset) {
        Suggestion entity = new Suggestion( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // city
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // district
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Suggestion entity, int offset) {
        entity.setType(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistrict(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Suggestion entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Suggestion entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
